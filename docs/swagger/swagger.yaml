basePath: /api/v1
definitions:
  auth.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginResponse:
    properties:
      email:
        type: string
      id:
        type: integer
    type: object
  entities.Character:
    description: Socionics character type with traits and description
    properties:
      description:
        example: Искатель, интуитивно-логический экстраверт
        type: string
      id:
        example: 1
        type: integer
      traits:
        example:
        - изобретательный
        - энтузиаст
        - непредсказуемый
        items:
          type: string
        type: array
      type:
        example: Дон Кихот
        type: string
    type: object
  entities.ErrorResponse:
    description: Standard error response format
    properties:
      error:
        example: error message
        type: string
    type: object
  entities.SuccessResponse:
    description: Standard success response format
    properties:
      status:
        example: success
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for Socionics Personality Typing
  title: Gocionics API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user
      parameters:
      - description: Credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: User login
      tags:
      - auth
  /characters:
    get:
      description: Get list of all available character types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Character'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Get all characters
      tags:
      - character
  /characters/{id}:
    get:
      description: Get character details
      parameters:
      - description: Character ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Character'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Get character by ID
      tags:
      - character
  /users/{id}/characters/{character_id}:
    post:
      consumes:
      - application/json
      description: Assign character to user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Character ID
        in: path
        name: character_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Assign character to user
      tags:
      - user
swagger: "2.0"
